==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: IntegerOverflowMappingSym1
Function name: constructor
PC address: 11
Estimated Gas Usage: 36 - 131
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./repositories/smartbugs-curated/integer_overflow_mapping_sym_1.sol:11

contract IntegerOverflowMappingSym1 {
    mapping(uint256 => uint256) map;

    function init(uint256 k, uint256 v) public {
        // <yes> <report> ARITHMETIC
        map[k] -= v;
    }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x1

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: IntegerOverflowMappingSym1
Function name: fallback
PC address: 57
Estimated Gas Usage: 64 - 159
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./repositories/smartbugs-curated/integer_overflow_mapping_sym_1.sol:11

contract IntegerOverflowMappingSym1 {
    mapping(uint256 => uint256) map;

    function init(uint256 k, uint256 v) public {
        // <yes> <report> ARITHMETIC
        map[k] -= v;
    }
}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: IntegerOverflowMappingSym1
Function name: init(uint256,uint256)
PC address: 122
Estimated Gas Usage: 6081 - 26366
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./repositories/smartbugs-curated/integer_overflow_mapping_sym_1.sol:16

map[k] -= v

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: init(uint256,uint256), txdata: 0xa5843f08000000000000000404000208000240100208001080024000000004000810028001, decoded_data: (25206487416143041536471523928795187847343590046180985275008, 452312848583266388373324160190187140051835877600158453279131187530910662656), value: 0x0


