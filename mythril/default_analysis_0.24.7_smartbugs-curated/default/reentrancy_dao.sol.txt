==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ReentrancyDAO
Function name: withdrawAll()
PC address: 249
Estimated Gas Usage: 12786 - 87447
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./repositories/smartbugs-curated/reentrancy_dao.sol:18

msg.sender.call.value(oCredit)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x49089800000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: ReentrancyDAO
Function name: withdrawAll()
PC address: 249
Estimated Gas Usage: 12786 - 87447
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./repositories/smartbugs-curated/reentrancy_dao.sol:18

msg.sender.call.value(oCredit)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20800000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: ReentrancyDAO
Function name: withdrawAll()
PC address: 334
Estimated Gas Usage: 12786 - 87447
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./repositories/smartbugs-curated/reentrancy_dao.sol:20

credit[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000100000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1
Caller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0


