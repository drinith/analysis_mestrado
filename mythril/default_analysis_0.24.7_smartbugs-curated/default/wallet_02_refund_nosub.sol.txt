==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: Wallet
Function name: refund()
PC address: 776
Estimated Gas Usage: 1872 - 36343
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./repositories/smartbugs-curated/wallet_02_refund_nosub.sol:36

msg.sender.transfer(balances[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Wallet
Function name: deposit()
PC address: 939
Estimated Gas Usage: 1977 - 2452
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./repositories/smartbugs-curated/wallet_02_refund_nosub.sol:23

function deposit() public payable {
         assert(balances[msg.sender] + msg.value > balances[msg.sender]);
         balances[msg.sender] += msg.value;
     }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20008, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x0


