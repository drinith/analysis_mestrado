CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/arbitrary_location_write_simple.sol --max-depth 10', returncode=1, stdout='==== Write to an arbitrary storage location ====\nSWC ID: 124\nSeverity: High\nContract: Wallet\nFunction name: UpdateBonusCodeAt(uint256,uint256)\nPC address: 294\nEstimated Gas Usage: 6957 - 27147\nThe caller can write to arbitrary storage locations.\nIt is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.\n--------------------\nIn file: ./repositories/smartbugs-curated/arbitrary_location_write_simple.sol:33\n\nbonusCodes[idx] = c\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: PopBonusCode(), txdata: 0x7adde4ef, value: 0x0\nCaller: [ATTACKER], function: UpdateBonusCodeAt(uint256,uint256), txdata: 0x4f798da7d6f21326ab749d5729fcba5677c79037b459436ab7bff709c9d06d35758a88b8, value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: Wallet\nFunction name: PopBonusCode()\nPC address: 331\nEstimated Gas Usage: 7692 - 27787\nThe arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/arbitrary_location_write_simple.sol:28\n\nbonusCodes.length--\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: PopBonusCode(), txdata: 0x7adde4ef, value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: Wallet\nFunction name: PushBonusCode(uint256)\nPC address: 471\nEstimated Gas Usage: 11188 - 51378\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: PopBonusCode(), txdata: 0x7adde4ef, value: 0x0\nCaller: [ATTACKER], function: PushBonusCode(uint256), txdata: 0xfd10d655, value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: Low\nContract: Wallet\nFunction name: PopBonusCode()\nPC address: 534\nEstimated Gas Usage: 12901 - 53091\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: PopBonusCode(), txdata: 0x7adde4ef, value: 0x0\nCaller: [CREATOR], function: PopBonusCode(), txdata: 0x7adde4ef, value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: Low\nContract: Wallet\nFunction name: PopBonusCode()\nPC address: 536\nEstimated Gas Usage: 12901 - 53091\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: PopBonusCode(), txdata: 0x7adde4ef, value: 0x0\nCaller: [CREATOR], function: PopBonusCode(), txdata: 0x7adde4ef, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/auction.sol --max-depth 10', returncode=1, stdout='==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: DosAuction\nFunction name: bid()\nPC address: 236\nEstimated Gas Usage: 15102 - 90373\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/auction.sol:23\n\ncurrentFrontrunner.send(currentBid)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x20000000000000000, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: bid(), txdata: 0x1998aeef, value: 0x1\nCaller: [ATTACKER], function: bid(), txdata: 0x1998aeef, value: 0x2\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/BECToken.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/blackjack.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/crypto_roulette.sol --max-depth 10', returncode=1, stdout="==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: CryptoRoulette\nFunction name: gamesPlayed(uint256)\nPC address: 454\nEstimated Gas Usage: 987 - 1082\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/crypto_roulette.sol:25\n\nGame[] public gamesPlayed\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: gamesPlayed(uint256), txdata: 0x382cf0a6, value: 0x0\n\n==== Dependence on predictable environment variable ====\nSWC ID: 116\nSeverity: Low\nContract: CryptoRoulette\nFunction name: kill()\nPC address: 627\nEstimated Gas Usage: 1839 - 2264\nA control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: ./repositories/smartbugs-curated/crypto_roulette.sol:55\n\nif (msg.sender == ownerAddr && now > lastPlayed + 1 days) {\n            suicide(msg.sender);\n        }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: kill(), txdata: 0x41c0e1b5, value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/dos_address.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/dos_number.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/dos_simple.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/ERC20.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/etheraffle.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/etherpot_lotto.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/etherstore.sol --max-depth 10', returncode=1, stdout="==== Dependence on predictable environment variable ====\nSWC ID: 116\nSeverity: Low\nContract: EtherStore\nFunction name: withdrawFunds(uint256)\nPC address: 583\nEstimated Gas Usage: 2870 - 3345\nA control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: ./repositories/smartbugs-curated/etherstore.sol:25\n\nrequire(now >= lastWithdrawTime[msg.sender] + 1 weeks)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee, value: 0x0\n\n==== External Call To User-Supplied Address ====\nSWC ID: 107\nSeverity: Low\nContract: EtherStore\nFunction name: withdrawFunds(uint256)\nPC address: 628\nEstimated Gas Usage: 14694 - 89735\nA call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\n--------------------\nIn file: ./repositories/smartbugs-curated/etherstore.sol:27\n\nmsg.sender.call.value(_weiToWithdraw)()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee, value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: EtherStore\nFunction name: withdrawFunds(uint256)\nPC address: 712\nEstimated Gas Usage: 14694 - 89735\nRead of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/etherstore.sol:28\n\nbalances[msg.sender] -= _weiToWithdraw\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee, value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: EtherStore\nFunction name: withdrawFunds(uint256)\nPC address: 719\nEstimated Gas Usage: 14694 - 89735\nWrite to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/etherstore.sol:28\n\nbalances[msg.sender] -= _weiToWithdraw\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee, value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: EtherStore\nFunction name: withdrawFunds(uint256)\nPC address: 787\nEstimated Gas Usage: 14694 - 89735\nWrite to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/etherstore.sol:29\n\nlastWithdrawTime[msg.sender] = now\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdrawFunds(uint256), txdata: 0x155dd5ee, value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/ether_lotto.sol --max-depth 10', returncode=1, stdout="==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: EtherLotto\nFunction name: play()\nPC address: 276\nEstimated Gas Usage: 153 - 248\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/ether_lotto.sol:33\n\nfunction play() payable {\n\n        // Participants must spend some fixed ether before playing lottery.\n        assert(msg.value == TICKET_AMOUNT);\n\n        // Increase pot for each participant.\n        pot += msg.value;\n\n        // Compute some *almost random* value for selecting winner from current transaction.\n        // <yes> <report> TIME_MANIPULATION\n        var random = uint(sha3(block.timestamp)) % 2;\n\n        // Distribution: 50% of participants will be winners.\n        if (random == 0) {\n\n            // Send fee to bank account.\n            bank.transfer(FEE_AMOUNT);\n\n            // Send jackpot to winner.\n            msg.sender.transfer(pot - FEE_AMOUNT);\n\n            // Restart jackpot.\n            pot = 0;\n        }\n    }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: play(), txdata: 0x93e84cd9, value: 0x0\n\n==== Dependence on predictable environment variable ====\nSWC ID: 116\nSeverity: Low\nContract: EtherLotto\nFunction name: play()\nPC address: 342\nEstimated Gas Usage: 6138 - 26514\nA control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: ./repositories/smartbugs-curated/ether_lotto.sol:46\n\nif (random == 0) {\n\n            // Send fee to bank account.\n            bank.transfer(FEE_AMOUNT);\n\n            // Send jackpot to winner.\n            msg.sender.transfer(pot - FEE_AMOUNT);\n\n            // Restart jackpot.\n            pot = 0;\n        }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: play(), txdata: 0x93e84cd9, value: 0xa\n\n==== Multiple Calls in a Single Transaction ====\nSWC ID: 113\nSeverity: Low\nContract: EtherLotto\nFunction name: play()\nPC address: 492\nEstimated Gas Usage: 14414 - 123492\nMultiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).\n--------------------\nIn file: ./repositories/smartbugs-curated/ether_lotto.sol:52\n\nmsg.sender.transfer(pot - FEE_AMOUNT)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: play(), txdata: 0x93e84cd9, value: 0xa\n\n==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: EtherLotto\nFunction name: play()\nPC address: 492\nEstimated Gas Usage: 14414 - 123492\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/ether_lotto.sol:52\n\nmsg.sender.transfer(pot - FEE_AMOUNT)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x1b, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: play(), txdata: 0x93e84cd9, value: 0xa\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/eth_tx_order_dependence_minimal.sol --max-depth 10', returncode=1, stdout='==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: EthTxOrderDependenceMinimal\nFunction name: claimReward(uint256)\nPC address: 686\nEstimated Gas Usage: 8566 - 63507\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/eth_tx_order_dependence_minimal.sol:31\n\nmsg.sender.transfer(reward)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: claimReward(uint256), txdata: 0xae169a50, value: 0x0\n\n==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: EthTxOrderDependenceMinimal\nFunction name: claimReward(uint256)\nPC address: 686\nEstimated Gas Usage: 8566 - 63507\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: ./repositories/smartbugs-curated/eth_tx_order_dependence_minimal.sol:31\n\nmsg.sender.transfer(reward)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x502008121a04a4020, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: setReward(), txdata: 0x3eb6a67e, value: 0x1\nCaller: [ATTACKER], function: claimReward(uint256), txdata: 0xae169a50, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/FibonacciBalance.sol --max-depth 10', returncode=1, stdout='==== Delegatecall to user-supplied address ====\nSWC ID: 112\nSeverity: High\nContract: FibonacciBalance\nFunction name: fallback\nPC address: 212\nEstimated Gas Usage: 1748 - 38663\nThe contract delegates execution to another contract with a user-supplied address.\nThe smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.\n--------------------\nIn file: ./repositories/smartbugs-curated/FibonacciBalance.sol:38\n\nfibonacciLibrary.delegatecall(msg.data)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x4, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: dededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0\nCaller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0\n\n==== Delegatecall to user-supplied address ====\nSWC ID: 112\nSeverity: High\nContract: FibonacciBalance\nFunction name: withdraw()\nPC address: 740\nEstimated Gas Usage: 10192 - 99460\nThe contract delegates execution to another contract with a user-supplied address.\nThe smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.\n--------------------\nIn file: ./repositories/smartbugs-curated/FibonacciBalance.sol:31\n\nfibonacciLibrary.delegatecall(fibSig, withdrawalCounter)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x40000000021, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: dededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: FibonacciBalance\nFunction name: withdraw()\nPC address: 793\nEstimated Gas Usage: 10192 - 99460\nRead of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/FibonacciBalance.sol:32\n\ncalculatedFibNumber\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: dededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0\n\n==== Multiple Calls in a Single Transaction ====\nSWC ID: 113\nSeverity: Low\nContract: FibonacciBalance\nFunction name: withdraw()\nPC address: 815\nEstimated Gas Usage: 10192 - 99460\nMultiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).\n--------------------\nIn file: ./repositories/smartbugs-curated/FibonacciBalance.sol:32\n\nmsg.sender.transfer(calculatedFibNumber * 1 ether)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x2, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: FibonacciBalance\nFunction name: withdraw()\nPC address: 815\nEstimated Gas Usage: 10192 - 99460\nWrite to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/FibonacciBalance.sol:32\n\nmsg.sender.transfer(calculatedFibNumber * 1 ether)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: dededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0\n\n==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: FibonacciBalance\nFunction name: withdraw()\nPC address: 815\nEstimated Gas Usage: 10192 - 99460\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/FibonacciBalance.sol:32\n\nmsg.sender.transfer(calculatedFibNumber * 1 ether)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x1, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/FindThisHash.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/governmental_survey.sol --max-depth 10', returncode=1, stdout="==== requirement violation ====\nSWC ID: 123\nSeverity: Medium\nContract: Attacker\nFunction name: attack(address,uint256)\nPC address: 360\nEstimated Gas Usage: 1900 - 36466\nA requirement was violated in a nested call and the call was reverted as a result.\nMake sure valid inputs are provided to the nested call (for instance, via passed arguments).\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fd, decoded_data: ('0x0000000000000000000000000000000000000000', 1021), value: 0x0\n\n==== requirement violation ====\nSWC ID: 123\nSeverity: Medium\nContract: Attacker\nFunction name: attack(address,uint256)\nPC address: 470\nEstimated Gas Usage: 1084 - 1460\nA requirement was violated in a nested call and the call was reverted as a result.\nMake sure valid inputs are provided to the nested call (for instance, via passed arguments).\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fe, decoded_data: ('0x0000000000000000000000000000000000000000', 1022), value: 0x0\n\n==== External Call To User-Supplied Address ====\nSWC ID: 107\nSeverity: Low\nContract: Attacker\nFunction name: attack(address,uint256)\nPC address: 474\nEstimated Gas Usage: 1828 - 36204\nA call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\n--------------------\nIn file: ./repositories/smartbugs-curated/governmental_survey.sol:50\n\nGovernmental(target).resetInvestment()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef40, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 28948022309329048855892746252171976963317496166410141009864396001978282409984), value: 0x0\n\n==== requirement violation ====\nSWC ID: 123\nSeverity: Medium\nContract: Attacker\nFunction name: attack(address,uint256)\nPC address: 490\nEstimated Gas Usage: 1821 - 36197\nA requirement was violated in a nested call and the call was reverted as a result.\nMake sure valid inputs are provided to the nested call (for instance, via passed arguments).\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fe, decoded_data: ('0x0000000000000000000000000000000000000000', 1022), value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/guess_the_random_number.sol --max-depth 10', returncode=1, stdout='==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: GuessTheRandomNumberChallenge\nFunction name: guess(uint8)\nPC address: 259\nEstimated Gas Usage: 1851 - 36462\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: ./repositories/smartbugs-curated/guess_the_random_number.sol:26\n\nmsg.sender.transfer(2 ether)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x20011c0001840002, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x420010804400c0001, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0xde0b6b3a7640000\nCaller: [SOMEGUY], function: guess(uint8), txdata: 0x4ba4c16b, value: 0xde0b6b3a7640000\nCaller: [ATTACKER], function: guess(uint8), txdata: 0x4ba4c16b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b80, value: 0xde0b6b3a7640000\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/name_registrar.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/odds_and_evens.sol --max-depth 10', returncode=1, stdout="==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: OddsAndEvens\nFunction name: getProfit()\nPC address: 428\nEstimated Gas Usage: 2505 - 37116\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: ./repositories/smartbugs-curated/odds_and_evens.sol:50\n\nmsg.sender.send(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x40de1580440640002, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: play(uint256), txdata: 0x6898f82b, value: 0xde0b6b3a7640000\nCaller: [CREATOR], function: getProfit(), txdata: 0x679dffb4, value: 0x0\n\n==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: OddsAndEvens\nFunction name: players(uint256)\nPC address: 727\nEstimated Gas Usage: 258 - 353\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/odds_and_evens.sol:16\n\nPlayer[2] public players\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: players(uint256), txdata: 0xf71d96cb01, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/old_blockhash.sol --max-depth 10', returncode=1, stdout="==== Dependence on predictable environment variable ====\nSWC ID: 120\nSeverity: Low\nContract: PredictTheBlockHashChallenge\nFunction name: settle()\nPC address: 216\nEstimated Gas Usage: 1039 - 1324\nA control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: ./repositories/smartbugs-curated/old_blockhash.sol:33\n\nrequire(block.number > guesses[msg.sender].block)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x40e01080440040002, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0xde0b6b3a7640000\nCaller: [ATTACKER], function: settle(), txdata: 0x11da60b4, value: 0x0\n\n==== Dependence on predictable environment variable ====\nSWC ID: 120\nSeverity: Low\nContract: PredictTheBlockHashChallenge\nFunction name: settle()\nPC address: 442\nEstimated Gas Usage: 8010 - 28865\nA control flow decision is made based on The block hash of a previous block.\nThe block hash of a previous block is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: ./repositories/smartbugs-curated/old_blockhash.sol:38\n\nif (guesses[msg.sender].guess == answer) {\n            msg.sender.transfer(2 ether);\n        }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x2001080440040002, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0xde0b6b3a7640000\nCaller: [ATTACKER], function: settle(), txdata: 0x11da60b4, value: 0x0\n\n==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: PredictTheBlockHashChallenge\nFunction name: settle()\nPC address: 498\nEstimated Gas Usage: 8838 - 63879\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: ./repositories/smartbugs-curated/old_blockhash.sol:39\n\nmsg.sender.transfer(2 ether)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x21c10c0002040002, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x2103a820498680000, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0xde0b6b3a7640000\nCaller: [SOMEGUY], function: lockInGuess(bytes32), txdata: 0xed7f559c, value: 0xde0b6b3a7640000\nCaller: [ATTACKER], function: settle(), txdata: 0x11da60b4, value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: PredictTheBlockHashChallenge\nFunction name: lockInGuess(bytes32)\nPC address: 705\nEstimated Gas Usage: 11382 - 52047\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/old_blockhash.sol:29\n\nblock.number + 1\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x401c10c0542040001, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x2000000400000002, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0xde0b6b3a7640000\nCaller: [ATTACKER], function: lockInGuess(bytes32), txdata: 0xed7f559c, value: 0xde0b6b3a7640000\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/open_address_lottery.sol --max-depth 10', returncode=1, stdout="==== Dependence on predictable environment variable ====\nSWC ID: 120\nSeverity: Low\nContract: OpenAddressLottery\nFunction name: fallback\nPC address: 711\nEstimated Gas Usage: 4653 - 5974\nA control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: ./repositories/smartbugs-curated/open_address_lottery.sol:63\n\nif(block.number-lastReseed>1000) //reseed if needed\n            reseed(SeedComponents((uint)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp))\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x4012078de060001, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: forceReseed(), txdata: 0x80ca7aec, value: 0x0\nCaller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x16345785d8a0000\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: OpenAddressLottery\nFunction name: forceReseed()\nPC address: 1183\nEstimated Gas Usage: 34795 - 156726\nThe arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/open_address_lottery.sol:93\n\nblock.number - 1\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: forceReseed(), txdata: 0x80ca7aec, value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: OpenAddressLottery\nFunction name: forceReseed()\nPC address: 1221\nEstimated Gas Usage: 34795 - 156726\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/open_address_lottery.sol:94\n\nblock.difficulty*(uint)(block.coinbase)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: forceReseed(), txdata: 0x80ca7aec, value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: OpenAddressLottery\nFunction name: forceReseed()\nPC address: 1233\nEstimated Gas Usage: 34795 - 156726\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/open_address_lottery.sol:95\n\ntx.gasprice * 7\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: forceReseed(), txdata: 0x80ca7aec, value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/overflow_simple_add.sol --max-depth 10', returncode=1, stdout='==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: Overflow_Add\nFunction name: add(uint256)\nPC address: 168\nEstimated Gas Usage: 6024 - 26119\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/overflow_simple_add.sol:14\n\nbalance += deposit\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: add(uint256), txdata: 0x1003e2d2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, decoded_data: (115792089237316195423570985008687907853269984665640564039457584007913129639935,), value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/overflow_single_tx.sol --max-depth 10', returncode=1, stdout='==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: IntegerOverflowSingleTransaction\nFunction name: underflowtostate(uint256)\nPC address: 476\nEstimated Gas Usage: 6068 - 26163\nThe arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/overflow_single_tx.sol:30\n\ncount -= input\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: underflowtostate(uint256), txdata: 0x4c4f50f301, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: IntegerOverflowSingleTransaction\nFunction name: overflowmultostate(uint256)\nPC address: 494\nEstimated Gas Usage: 6092 - 26187\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/overflow_single_tx.sol:24\n\ncount *= input\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: overflowaddtostate(uint256), txdata: 0xdef92d681d, decoded_data: (13117072608914725262826400645515427061503240450404595145094804438396409217024,), value: 0x0\nCaller: [CREATOR], function: overflowmultostate(uint256), txdata: 0x5c68bc06ca, decoded_data: (91367195413819810451411480358417802290470847275232007562384499881243953856512,), value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: IntegerOverflowSingleTransaction\nFunction name: overflowaddtostate(uint256)\nPC address: 525\nEstimated Gas Usage: 6134 - 26229\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/overflow_single_tx.sol:18\n\ncount += input\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: overflowaddtostate(uint256), txdata: 0xdef92d68ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, decoded_data: (115792089237316195423570985008687907853269984665640564039457584007913129639935,), value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/parity_wallet_bug_1.sol --max-depth 10', returncode=0, stdout='', stderr='mythril.interfaces.cli [ERROR]: Solc experienced a fatal error.\n\n./repositories/smartbugs-curated/parity_wallet_bug_1.sol:18:1: SyntaxError: Source file requires different compiler version (current compiler is 0.4.26+commit.4563c3fc.Linux.g++ - note that nightly builds are considered to be strictly less than the released version\npragma solidity 0.4.9; /* originally ^0.4.9, but doesn\'t compile with ^0.4.11 */\n^--------------------^\n\nSolidityVersionMismatch: Try adding the option "--solv <version_number>"\n\n')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/parity_wallet_bug_2.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/phishable.sol --max-depth 10', returncode=1, stdout='==== Dependence on tx.origin ====\nSWC ID: 115\nSeverity: Low\nContract: Phishable\nFunction name: withdrawAll(address)\nPC address: 355\nEstimated Gas Usage: 1073 - 1498\nUse of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\n--------------------\nIn file: ./repositories/smartbugs-curated/phishable.sol:20\n\nrequire(tx.origin == owner)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdrawAll(address), txdata: 0xfa09e630, value: 0x0\n\n==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: Phishable\nFunction name: withdrawAll(address)\nPC address: 431\nEstimated Gas Usage: 2607 - 37218\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/phishable.sol:21\n\n_recipient.transfer(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: dededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdrawAll(address), txdata: 0xfa09e630, value: 0x0\n\n==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: Phishable\nFunction name: withdrawAll(address)\nPC address: 431\nEstimated Gas Usage: 2607 - 37218\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: ./repositories/smartbugs-curated/phishable.sol:21\n\n_recipient.transfer(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: 090909090909090909090909deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x1\nCaller: [ATTACKER], function: withdrawAll(address), txdata: 0xfa09e630090909090909090909090909deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/proxy.sol --max-depth 10', returncode=1, stdout='==== Delegatecall to user-supplied address ====\nSWC ID: 112\nSeverity: High\nContract: Proxy\nFunction name: forward(address,bytes)\nPC address: 337\nEstimated Gas Usage: 1312 - 38273\nThe contract delegates execution to another contract with a user-supplied address.\nThe smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.\n--------------------\nIn file: ./repositories/smartbugs-curated/proxy.sol:19\n\ncallee.delegatecall(_data)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: forward(address,bytes), txdata: 0x6fadcf72000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefc8, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/random_number_generator.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/reentrance.sol --max-depth 10', returncode=1, stdout="==== External Call To User-Supplied Address ====\nSWC ID: 107\nSeverity: Low\nContract: Reentrance\nFunction name: withdraw(uint256)\nPC address: 552\nEstimated Gas Usage: 7811 - 62472\nA call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\n--------------------\nIn file: ./repositories/smartbugs-curated/reentrance.sol:24\n\nmsg.sender.call.value(_amount)()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0\n\n==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: Reentrance\nFunction name: withdraw(uint256)\nPC address: 552\nEstimated Gas Usage: 7811 - 62472\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: ./repositories/smartbugs-curated/reentrance.sol:24\n\nmsg.sender.call.value(_amount)()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0\nCaller: [CREATOR], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0\n\n==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: Reentrance\nFunction name: withdraw(uint256)\nPC address: 552\nEstimated Gas Usage: 7811 - 62472\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: ./repositories/smartbugs-curated/reentrance.sol:24\n\nmsg.sender.call.value(_amount)()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: donate(address), txdata: 0x00362a95000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x1\nCaller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: Reentrance\nFunction name: withdraw(uint256)\nPC address: 625\nEstimated Gas Usage: 7811 - 62472\nRead of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/reentrance.sol:27\n\nbalances[msg.sender] -= _amount\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: Reentrance\nFunction name: withdraw(uint256)\nPC address: 632\nEstimated Gas Usage: 7811 - 62472\nWrite to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/reentrance.sol:27\n\nbalances[msg.sender] -= _amount\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/reentrancy_dao.sol --max-depth 10', returncode=1, stdout='==== External Call To User-Supplied Address ====\nSWC ID: 107\nSeverity: Low\nContract: ReentrancyDAO\nFunction name: withdrawAll()\nPC address: 249\nEstimated Gas Usage: 12786 - 87447\nA call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\n--------------------\nIn file: ./repositories/smartbugs-curated/reentrancy_dao.sol:18\n\nmsg.sender.call.value(oCredit)()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x49089800000000000, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1\nCaller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0\n\n==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: ReentrancyDAO\nFunction name: withdrawAll()\nPC address: 249\nEstimated Gas Usage: 12786 - 87447\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/reentrancy_dao.sol:18\n\nmsg.sender.call.value(oCredit)()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x20800000000000, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1\nCaller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: ReentrancyDAO\nFunction name: withdrawAll()\nPC address: 334\nEstimated Gas Usage: 12786 - 87447\nWrite to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/reentrancy_dao.sol:20\n\ncredit[msg.sender] = 0\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x20000000100000000, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1\nCaller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/reentrancy_simple.sol --max-depth 10', returncode=1, stdout='==== External Call To User-Supplied Address ====\nSWC ID: 107\nSeverity: Low\nContract: Reentrance\nFunction name: withdrawBalance()\nPC address: 298\nEstimated Gas Usage: 6881 - 61542\nA call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\n--------------------\nIn file: ./repositories/smartbugs-curated/reentrancy_simple.sol:24\n\nmsg.sender.call.value(userBalance[msg.sender])()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0\n\n==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: Reentrance\nFunction name: withdrawBalance()\nPC address: 298\nEstimated Gas Usage: 6881 - 61542\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/reentrancy_simple.sol:24\n\nmsg.sender.call.value(userBalance[msg.sender])()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: Reentrance\nFunction name: withdrawBalance()\nPC address: 380\nEstimated Gas Usage: 6881 - 61542\nWrite to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/reentrancy_simple.sol:27\n\nuserBalance[msg.sender] = 0\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/roulette.sol --max-depth 10', returncode=1, stdout="==== Dependence on predictable environment variable ====\nSWC ID: 116\nSeverity: Low\nContract: Roulette\nFunction name: fallback\nPC address: 99\nEstimated Gas Usage: 888 - 983\nA control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: ./repositories/smartbugs-curated/roulette.sol:18\n\nrequire(now != pastBlockTime)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x8102000000001f, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x8ac7230489e80000\n\n==== Dependence on predictable environment variable ====\nSWC ID: 116\nSeverity: Low\nContract: Roulette\nFunction name: fallback\nPC address: 132\nEstimated Gas Usage: 5957 - 26052\nA control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: ./repositories/smartbugs-curated/roulette.sol:21\n\nif(now % 15 == 0) { // winner\n            msg.sender.transfer(this.balance);\n        }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x1080, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x8ac7230489e80000\n\n==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: Roulette\nFunction name: fallback\nPC address: 203\nEstimated Gas Usage: 7524 - 61805\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/roulette.sol:22\n\nmsg.sender.transfer(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x1, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x14100040542080004, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x8ac7230489e80000\n\n==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: Roulette\nFunction name: fallback\nPC address: 203\nEstimated Gas Usage: 7524 - 61805\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: ./repositories/smartbugs-curated/roulette.sol:22\n\nmsg.sender.transfer(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x14020002, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x3e9f0539bb7ffffff, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x1\nCaller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x8ac7230489e80000\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/incorrect_constructor_name2.sol --max-depth 10', returncode=1, stdout='==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: Missing\nFunction name: withdraw()\nPC address: 319\nEstimated Gas Usage: 3357 - 38298\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/incorrect_constructor_name2.sol:30\n\nowner.transfer(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: missing(), txdata: 0xa8b00865, value: 0x0\nCaller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/incorrect_constructor_name3.sol --max-depth 10', returncode=1, stdout='==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: Missing\nFunction name: withdraw()\nPC address: 319\nEstimated Gas Usage: 3357 - 38298\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/incorrect_constructor_name3.sol:29\n\nowner.transfer(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: Constructor(), txdata: 0x8a3c44a5, value: 0x0\nCaller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/integer_overflow_1.sol --max-depth 10', returncode=1, stdout='==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: Overflow\nFunction name: add(uint256)\nPC address: 127\nEstimated Gas Usage: 6050 - 26426\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/integer_overflow_1.sol:14\n\nsellerBalance += value\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: add(uint256), txdata: 0x1003e2d246, decoded_data: (31661899400828647186132691213313099803628511432011091729539183127163746385920,), value: 0x0\nCaller: [SOMEGUY], function: add(uint256), txdata: 0x1003e2d2c0, decoded_data: (86844066927987146567678238756515930889952488499230423029593188005934847229952,), value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/integer_overflow_add.sol --max-depth 10', returncode=1, stdout='==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: IntegerOverflowAdd\nFunction name: run(uint256)\nPC address: 162\nEstimated Gas Usage: 6019 - 26114\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/integer_overflow_add.sol:17\n\ncount += input\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: run(uint256), txdata: 0xa444f5e9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, decoded_data: (115792089237316195423570985008687907853269984665640564039457584007913129639935,), value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/integer_overflow_benign_1.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/integer_overflow_mapping_sym_1.sol --max-depth 10', returncode=1, stdout='==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: IntegerOverflowMappingSym1\nFunction name: constructor\nPC address: 11\nEstimated Gas Usage: 36 - 131\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/integer_overflow_mapping_sym_1.sol:11\n\ncontract IntegerOverflowMappingSym1 {\n    mapping(uint256 => uint256) map;\n\n    function init(uint256 k, uint256 v) public {\n        // <yes> <report> ARITHMETIC\n        map[k] -= v;\n    }\n}\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x2, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x1\n\n==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: IntegerOverflowMappingSym1\nFunction name: fallback\nPC address: 57\nEstimated Gas Usage: 64 - 159\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/integer_overflow_mapping_sym_1.sol:11\n\ncontract IntegerOverflowMappingSym1 {\n    mapping(uint256 => uint256) map;\n\n    function init(uint256 k, uint256 v) public {\n        // <yes> <report> ARITHMETIC\n        map[k] -= v;\n    }\n}\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: IntegerOverflowMappingSym1\nFunction name: init(uint256,uint256)\nPC address: 122\nEstimated Gas Usage: 6081 - 26366\nThe arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/integer_overflow_mapping_sym_1.sol:16\n\nmap[k] -= v\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: init(uint256,uint256), txdata: 0xa5843f08000000000000000404000208000240100208001080024000000004000810028001, decoded_data: (25206487416143041536471523928795187847343590046180985275008, 452312848583266388373324160190187140051835877600158453279131187530910662656), value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/integer_overflow_minimal.sol --max-depth 10', returncode=1, stdout='==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: IntegerOverflowMinimal\nFunction name: run(uint256)\nPC address: 162\nEstimated Gas Usage: 6019 - 26114\nThe arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/integer_overflow_minimal.sol:17\n\ncount -= input\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: run(uint256), txdata: 0xa444f5e901, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/integer_overflow_mul.sol --max-depth 10', returncode=1, stdout='==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: IntegerOverflowMul\nFunction name: run(uint256)\nPC address: 162\nEstimated Gas Usage: 6021 - 26116\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/integer_overflow_mul.sol:17\n\ncount *= input\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: run(uint256), txdata: 0xa444f5e980, decoded_data: (57896044618658097711785492504343953926634992332820282019728792003956564819968,), value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/integer_overflow_multitx_multifunc_feasible.sol --max-depth 10', returncode=1, stdout='==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: IntegerOverflowMultiTxMultiFuncFeasible\nFunction name: run(uint256)\nPC address: 218\nEstimated Gas Usage: 6873 - 26968\nThe arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/integer_overflow_multitx_multifunc_feasible.sol:25\n\ncount -= input\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: init(), txdata: 0xe1c7392a, value: 0x0\nCaller: [SOMEGUY], function: run(uint256), txdata: 0xa444f5e901, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/integer_overflow_multitx_onefunc_feasible.sol --max-depth 10', returncode=1, stdout='==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: IntegerOverflowMultiTxOneFuncFeasible\nFunction name: run(uint256)\nPC address: 196\nEstimated Gas Usage: 6873 - 26968\nThe arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/integer_overflow_multitx_onefunc_feasible.sol:22\n\ncount -= input\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: run(uint256), txdata: 0xa444f5e9, value: 0x0\nCaller: [CREATOR], function: run(uint256), txdata: 0xa444f5e901, decoded_data: (452312848583266388373324160190187140051835877600158453279131187530910662656,), value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/king_of_the_ether_throne.sol --max-depth 10', returncode=1, stdout="==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: KingOfTheEtherThrone\nFunction name: fallback\nPC address: 1018\nEstimated Gas Usage: 1906 - 38774\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: ./repositories/smartbugs-curated/king_of_the_ether_throne.sol:110\n\nmsg.sender.send(valuePaid)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: claimThrone(string), txdata: 0xb66a323c, value: 0x0\nCaller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0\n\n==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: KingOfTheEtherThrone\nFunction name: claimThrone(string)\nPC address: 1018\nEstimated Gas Usage: 2098 - 38966\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: ./repositories/smartbugs-curated/king_of_the_ether_throne.sol:110\n\nmsg.sender.send(valuePaid)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: claimThrone(string), txdata: 0xb66a323c, value: 0x0\nCaller: [CREATOR], function: claimThrone(string), txdata: 0xb66a323c, value: 0x0\n\n==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: KingOfTheEtherThrone\nFunction name: sweepCommission(uint256)\nPC address: 2605\nEstimated Gas Usage: 2684 - 37625\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: ./repositories/smartbugs-curated/king_of_the_ether_throne.sol:174\n\nwizardAddress.send(amount)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: claimThrone(string), txdata: 0xb66a323c, value: 0x0\nCaller: [CREATOR], function: sweepCommission(uint256), txdata: 0x0eb3f5a0, value: 0x0\n\n==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: KingOfTheEtherThrone\nFunction name: pastMonarchs(uint256)\nPC address: 2635\nEstimated Gas Usage: 1058 - 1153\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/king_of_the_ether_throne.sol:69\n\nMonarch[] public pastMonarchs\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: pastMonarchs(uint256), txdata: 0x7842c52d, value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/list_dos.sol --max-depth 10', returncode=1, stdout="==== Dependence on predictable environment variable ====\nSWC ID: 116\nSeverity: Low\nContract: Government\nFunction name: fallback\nPC address: 1188\nEstimated Gas Usage: 915 - 1010\nA control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: ./repositories/smartbugs-curated/list_dos.sol:35\n\nif (lastTimeOfNewCredit + TWELVE_HOURS < block.timestamp) {\n             // Return money to sender\n             msg.sender.send(amount);\n             // Sends all contract money to the last creditor\n             creditorAddresses[creditorAddresses.length - 1].send(profitFromCrash);\n             corruptElite.send(this.balance);\n             // Reset contract state\n             lastCreditorPayedOut = 0;\n             lastTimeOfNewCredit = block.timestamp;\n             profitFromCrash = 0;\n            // <yes> <report> DENIAL_OF_SERVICE\n             creditorAddresses = new address[](0);\n            // <yes> <report> DENIAL_OF_SERVICE\n             creditorAmounts = new uint[](0);\n             round += 1;\n             return false;\n         }\n         else {\n             // the system needs to collect at least 1% of the profit from a crash to stay alive\n             if (amount >= 10 ** 18) {\n                 // the System has received fresh money, it will survive at leat 12h more\n                 lastTimeOfNewCredit = block.timestamp;\n                 // register the new creditor and his amount with 10% interest rate\n                 creditorAddresses.push(msg.sender);\n                 creditorAmounts.push(amount * 110 / 100);\n                 // now the money is distributed\n                 // first the corrupt elite grabs 5% - thieves!\n                 corruptElite.send(amount * 5/100);\n                 // 5% are going into the economy (they will increase the value for the person seeing the crash comming)\n                 if (profitFromCrash < 10000 * 10**18) {\n                     profitFromCrash += amount * 5/100;\n                 }\n                 // if you have a buddy in the government (and he is in the creditor list) he can get 5% of your credits.\n                 // Make a deal with him.\n                 if(buddies[buddy] >= amount) {\n                     buddy.send(amount * 5/100);\n                 }\n                 buddies[msg.sender] += amount * 110 / 100;\n                 // 90% of the money will be used to pay out old creditors\n                 if (creditorAmounts[lastCreditorPayedOut] <= address(this).balance - profitFromCrash) {\n                     creditorAddresses[lastCreditorPayedOut].send(creditorAmounts[lastCreditorPayedOut]);\n                     buddies[creditorAddresses[lastCreditorPayedOut]] -= creditorAmounts[lastCreditorPayedOut];\n                     lastCreditorPayedOut += 1;\n                 }\n                 return true;\n             }\n             else {\n                 msg.sender.send(amount);\n                 return false;\n             }\n         }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0\n\n==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: Government\nFunction name: fallback\nPC address: 1264\nEstimated Gas Usage: 3356 - 37637\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/list_dos.sol:90\n\nlendGovernmentMoney(0)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x0\n\n==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: Government\nFunction name: fallback\nPC address: 2876\nEstimated Gas Usage: 1768 - 36049\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: ./repositories/smartbugs-curated/list_dos.sol:82\n\nmsg.sender.send(amount)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: inheritToNextGeneration(address), txdata: 0x4a1f0bf6, value: 0x0\nCaller: [CREATOR], function: unknown, txdata: 0x, decoded_data: , value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/lottery.sol --max-depth 10', returncode=1, stdout="==== Dependence on predictable environment variable ====\nSWC ID: 120\nSeverity: Low\nContract: Lottery\nFunction name: makeBet()\nPC address: 329\nEstimated Gas Usage: 22131 - 103403\nA control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: ./repositories/smartbugs-curated/lottery.sol:45\n\nif(won) {\n             if(!msg.sender.send(msg.value)) {\n                 // Return ether to sender\n                 throw;\n             }\n         }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: makeBet(), txdata: 0x561e91a1, value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/lotto.sol --max-depth 10', returncode=1, stdout="==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: Lotto\nFunction name: withdrawLeftOver()\nPC address: 424\nEstimated Gas Usage: 2472 - 37083\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/lotto.sol:27\n\nmsg.sender.send(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: sendToWinner(), txdata: 0x8f1c0585, value: 0x0\nCaller: [ATTACKER], function: withdrawLeftOver(), txdata: 0x1846f51a, value: 0x0\n\n==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: Lotto\nFunction name: withdrawLeftOver()\nPC address: 424\nEstimated Gas Usage: 2472 - 37083\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: ./repositories/smartbugs-curated/lotto.sol:27\n\nmsg.sender.send(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: sendToWinner(), txdata: 0x8f1c0585, value: 0x0\nCaller: [SOMEGUY], function: withdrawLeftOver(), txdata: 0x1846f51a, value: 0x0\n\n==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: Lotto\nFunction name: sendToWinner()\nPC address: 543\nEstimated Gas Usage: 9296 - 64567\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/lotto.sol:20\n\nwinner.send(winAmount)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: sendToWinner(), txdata: 0x8f1c0585, value: 0x0\n\n==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: Lotto\nFunction name: sendToWinner()\nPC address: 543\nEstimated Gas Usage: 9296 - 64567\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: ./repositories/smartbugs-curated/lotto.sol:20\n\nwinner.send(winAmount)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: sendToWinner(), txdata: 0x8f1c0585, value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/lucky_doubler.sol --max-depth 10', returncode=1, stdout="==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: LuckyDoubler\nFunction name: fallback\nPC address: 1276\nEstimated Gas Usage: 906 - 35187\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: ./repositories/smartbugs-curated/lucky_doubler.sol:60\n\nmsg.sender.send(msg.value)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: changeOwner(address), txdata: 0xa6f9dae1, value: 0x0\nCaller: [ATTACKER], function: unknown, txdata: 0x, decoded_data: , value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/mapping_write.sol --max-depth 10', returncode=1, stdout='==== Exception State ====\nSWC ID: 110\nSeverity: Low\nContract: Map\nFunction name: set(uint256,uint256)\nPC address: 381\nEstimated Gas Usage: 7769 - 27864\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: set(uint256,uint256), txdata: 0x1ab06ee5ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0\n\n==== Write to an arbitrary storage location ====\nSWC ID: 124\nSeverity: High\nContract: Map\nFunction name: set(uint256,uint256)\nPC address: 395\nEstimated Gas Usage: 12845 - 53035\nThe caller can write to arbitrary storage locations.\nIt is possible to write to arbitrary storage locations. By modifying the values of storage variables, attackers may bypass security controls or manipulate the business logic of the smart contract.\n--------------------\nIn file: ./repositories/smartbugs-curated/mapping_write.sol:20\n\nmap[key] = value\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: set(uint256,uint256), txdata: 0x1ab06ee54ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd2603468cc846125, value: 0x0\n\n==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: Map\nFunction name: withdraw()\nPC address: 562\nEstimated Gas Usage: 2542 - 37153\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/mapping_write.sol:28\n\nmsg.sender.transfer(address(this).balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: set(uint256,uint256), txdata: 0x1ab06ee54ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30aadadadadadadadadadadadaddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: (35707666377435648211887908874984608119992236509074197713628505308453184860938, 78556986031590987483442276104213106986950869664862860515843040873257070608111), value: 0x0\nCaller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0\n\n==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: Map\nFunction name: get(uint256)\nPC address: 640\nEstimated Gas Usage: 1083 - 1178\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/mapping_write.sol:23\n\nfunction get(uint256 key) public view returns (uint256) {\n         return map[key];\n     }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: get(uint256), txdata: 0x9507d39a, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/modifier_reentrancy.sol --max-depth 10', returncode=1, stdout='==== External Call To User-Supplied Address ====\nSWC ID: 107\nSeverity: Low\nContract: attack\nFunction name: supportsToken()\nPC address: 351\nEstimated Gas Usage: 8779 - 65457\nA call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\n--------------------\nIn file: ./repositories/smartbugs-curated/modifier_reentrancy.sol:42\n\nModifierEntrancy(msg.sender).airDrop()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: supportsToken(), txdata: 0x4d5f327c, value: 0x0\n\n==== External Call To User-Supplied Address ====\nSWC ID: 107\nSeverity: Low\nContract: ModifierEntrancy\nFunction name: airDrop()\nPC address: 371\nEstimated Gas Usage: 8935 - 65238\nA call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\n--------------------\nIn file: ./repositories/smartbugs-curated/modifier_reentrancy.sol:21\n\nBank(msg.sender).supportsToken()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: airDrop(), txdata: 0xca5d0880, value: 0x0\n\n==== External Call To User-Supplied Address ====\nSWC ID: 107\nSeverity: Low\nContract: attack\nFunction name: call(address)\nPC address: 643\nEstimated Gas Usage: 1760 - 36136\nA call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\n--------------------\nIn file: ./repositories/smartbugs-curated/modifier_reentrancy.sol:47\n\nModifierEntrancy(token).airDrop()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: call(address), txdata: 0xf55332abdededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: ModifierEntrancy\nFunction name: airDrop()\nPC address: 678\nEstimated Gas Usage: 8935 - 65238\nRead of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/modifier_reentrancy.sol:16\n\ntokenBalance[msg.sender] += 20\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: airDrop(), txdata: 0xca5d0880, value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: ModifierEntrancy\nFunction name: airDrop()\nPC address: 685\nEstimated Gas Usage: 8935 - 65238\nWrite to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/modifier_reentrancy.sol:16\n\ntokenBalance[msg.sender] += 20\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: airDrop(), txdata: 0xca5d0880, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/multiowned_vulnerable.sol --max-depth 10', returncode=1, stdout="==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: TestContract\nFunction name: withdrawAll()\nPC address: 789\nEstimated Gas Usage: 2629 - 37430\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/multiowned_vulnerable.sol:57\n\nmsg.sender.transfer(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x1, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: newOwner(address), txdata: 0x85952454000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0\nCaller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0\n\n==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: TestContract\nFunction name: withdrawAll()\nPC address: 789\nEstimated Gas Usage: 2629 - 37430\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: ./repositories/smartbugs-curated/multiowned_vulnerable.sol:57\n\nmsg.sender.transfer(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x2, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x2298604608242080, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x1\nCaller: [SOMEGUY], function: newOwner(address), txdata: 0x85952454000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0\nCaller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/send_loop.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/short_address_example.sol --max-depth 10', returncode=1, stdout='==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: MyToken\nFunction name: constructor\nPC address: 11\nEstimated Gas Usage: 36 - 131\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/short_address_example.sol:14\n\nfunction MyToken() {\n         balances[tx.origin] = 10000;\n     }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x2, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x1\n\n==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: MyToken\nFunction name: sendCoin(address,uint256)\nPC address: 77\nEstimated Gas Usage: 82 - 177\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/short_address_example.sol:18\n\nfunction sendCoin(address to, uint amount) returns(bool sufficient) {\n         if (balances[msg.sender] < amount) return false;\n         balances[msg.sender] -= amount;\n         balances[to] += amount;\n         Transfer(msg.sender, to, amount);\n         return true;\n     }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: sendCoin(address,uint256), txdata: 0x90b98a11, value: 0x1\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/simple_dao.sol --max-depth 10', returncode=1, stdout="==== External Call To User-Supplied Address ====\nSWC ID: 107\nSeverity: Low\nContract: SimpleDAO\nFunction name: withdraw(uint256)\nPC address: 567\nEstimated Gas Usage: 7821 - 62482\nA call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\n--------------------\nIn file: ./repositories/smartbugs-curated/simple_dao.sol:19\n\nmsg.sender.call.value(amount)()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0\n\n==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: SimpleDAO\nFunction name: withdraw(uint256)\nPC address: 567\nEstimated Gas Usage: 7821 - 62482\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: ./repositories/smartbugs-curated/simple_dao.sol:19\n\nmsg.sender.call.value(amount)()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0\nCaller: [CREATOR], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0\n\n==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: SimpleDAO\nFunction name: withdraw(uint256)\nPC address: 567\nEstimated Gas Usage: 7821 - 62482\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: ./repositories/smartbugs-curated/simple_dao.sol:19\n\nmsg.sender.call.value(amount)()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x240c3088100606a, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: donate(address), txdata: 0x00362a95000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x1\nCaller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: SimpleDAO\nFunction name: withdraw(uint256)\nPC address: 641\nEstimated Gas Usage: 7821 - 62482\nRead of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/simple_dao.sol:20\n\ncredit[msg.sender]-=amount\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0\n\n==== State access after external call ====\nSWC ID: 107\nSeverity: Medium\nContract: SimpleDAO\nFunction name: withdraw(uint256)\nPC address: 648\nEstimated Gas Usage: 7821 - 62482\nWrite to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\n--------------------\nIn file: ./repositories/smartbugs-curated/simple_dao.sol:20\n\ncredit[msg.sender]-=amount\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/simple_suicide.sol --max-depth 10', returncode=1, stdout='==== Unprotected Selfdestruct ====\nSWC ID: 106\nSeverity: High\nContract: SimpleSuicide\nFunction name: sudicideAnyone()\nPC address: 112\nEstimated Gas Usage: 132 - 227\nAny sender can cause the contract to self-destruct.\nAny sender can trigger execution of the SELFDESTRUCT instruction to destroy this contract account and withdraw its balance to an arbitrary address. Review the transaction trace generated for this issue and make sure that appropriate security controls are in place to prevent unrestricted access.\n--------------------\nIn file: ./repositories/smartbugs-curated/simple_suicide.sol:13\n\nselfdestruct(msg.sender)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: sudicideAnyone(), txdata: 0xa56a3b5a, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/smart_billions.sol --max-depth 10', returncode=1, stdout="==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: SmartBillions\nFunction name: setBetMax(uint256)\nPC address: 9275\nEstimated Gas Usage: 1069 - 1494\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/smart_billions.sol:298\n\nfunction setBetMax(uint _maxsum) external onlyOwner {\n        hashBetMax = _maxsum;\n    }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: setBetMax(uint256), txdata: 0x0751076d, value: 0x0\n\n==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: SmartBillions\nFunction name: approve(address,uint256)\nPC address: 9438\nEstimated Gas Usage: 1293 - 1768\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/smart_billions.sol:98\n\nfunction approve(address _spender, uint _value) {\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    assert(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000000000000000000000000000000000000000000002, decoded_data: ('0x0000000000000000000000000000000000000000', 904625697166532776746648320380374280103671755200316906558262375061821325312), value: 0x0\nCaller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b3b3b3b3b3b3b3b3b3b3b3b3b3000000000000000000000000000000000000000010, value: 0x0\n\n==== Dependence on predictable environment variable ====\nSWC ID: 120\nSeverity: Low\nContract: SmartBillions\nFunction name: fallback\nPC address: 11134\nEstimated Gas Usage: 24450 - 89072\nA control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: ./repositories/smartbugs-curated/smart_billions.sol:646\n\nif(hashNext < block.number + 3) {\n                hashNext = block.number + 3;\n                hashBetSum = msg.value;\n            }\n            else{\n                if(hashBetSum > hashBetMax) {\n                    hashNext++;\n                    hashBetSum = msg.value;\n                }\n                else{\n                    hashBetSum += msg.value;\n                }\n            }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x1\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/spank_chain_payment.sol --max-depth 10', returncode=1, stdout='==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: ECTools\nFunction name: isSignedBy(bytes32,string,address)\nPC address: 205\nEstimated Gas Usage: 1376 - 7063\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/spank_chain_payment.sol:91\n\nfunction isSignedBy(bytes32 _hashedMsg, string _sig, address _addr) public pure returns (bool) {\n         require(_addr != 0x0);\n\n         return _addr == recoverSigner(_hashedMsg, _sig);\n     }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0xc04020fbdf2, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: isSignedBy(bytes32,string,address), txdata: 0x1052506f0000000000000000000000000000000000000000000000000000000000000001fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00000000000000000000000001, value: 0x0\n\n==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: ECTools\nFunction name: parseInt16Char(string)\nPC address: 2330\nEstimated Gas Usage: 484 - 3259\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/spank_chain_payment.sol:116\n\nfunction parseInt16Char(string _char) public pure returns (uint) {\n         bytes memory bresult = bytes(_char);\n         // bool decimals = false;\n         if ((bresult[0] >= 48) && (bresult[0] <= 57)) {\n             return uint(bresult[0]) - 48;\n         } else if ((bresult[0] >= 65) && (bresult[0] <= 70)) {\n             return uint(bresult[0]) - 55;\n         } else if ((bresult[0] >= 97) && (bresult[0] <= 102)) {\n             return uint(bresult[0]) - 87;\n         } else {\n             revert();\n         }\n     }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x400000003bfb8, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: parseInt16Char(string), txdata: 0x38b025b2, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/timed_crowdsale.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/timelock.sol --max-depth 10', returncode=1, stdout="==== Dependence on predictable environment variable ====\nSWC ID: 116\nSeverity: Low\nContract: TimeLock\nFunction name: withdraw()\nPC address: 540\nEstimated Gas Usage: 1973 - 2448\nA control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: ./repositories/smartbugs-curated/timelock.sol:27\n\nrequire(now > lockTime[msg.sender])\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: deposit(), txdata: 0xd0e30db0, value: 0x1\nCaller: [SOMEGUY], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0\n\n==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: TimeLock\nFunction name: withdraw()\nPC address: 726\nEstimated Gas Usage: 8801 - 63842\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/timelock.sol:30\n\nmsg.sender.transfer(transferValue)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x1\nCaller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/token.sol --max-depth 10', returncode=1, stdout="==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: Token\nFunction name: transfer(address,uint256)\nPC address: 446\nEstimated Gas Usage: 13093 - 54039\nThe arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/token.sol:20\n\nbalances[msg.sender] - _value\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000001010104008001020804208010041000044003, decoded_data: ('0x0000010101040080010208042080100410000440', 1356938545749799165119972480570561420155507632800475359837393562592731987968), value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: Token\nFunction name: transfer(address,uint256)\nPC address: 528\nEstimated Gas Usage: 13093 - 54039\nThe arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/token.sol:22\n\nbalances[msg.sender] -= _value\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000001010104008001020804208010041000044003, decoded_data: ('0x0000010101040080010208042080100410000440', 1356938545749799165119972480570561420155507632800475359837393562592731987968), value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: Token\nFunction name: transfer(address,uint256)\nPC address: 604\nEstimated Gas Usage: 13093 - 54039\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/token.sol:23\n\nbalances[_to] += _value\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa80, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 57896044618658097711785492504343953926634992332820282019728792003956564819968), value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/tokensalechallenge.sol --max-depth 10', returncode=1, stdout='==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: TokenSaleChallenge\nFunction name: buy(uint256)\nPC address: 360\nEstimated Gas Usage: 6147 - 26432\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/tokensalechallenge.sol:23\n\nnumTokens * PRICE_PER_TOKEN\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x401c00c0542080002, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0xde0b6b3a7640000\nCaller: [SOMEGUY], function: buy(uint256), txdata: 0xd96a094a80, decoded_data: (57896044618658097711785492504343953926634992332820282019728792003956564819968,), value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/unchecked_return_value.sol --max-depth 10', returncode=1, stdout="==== External Call To User-Supplied Address ====\nSWC ID: 107\nSeverity: Low\nContract: ReturnValue\nFunction name: callchecked(address)\nPC address: 255\nEstimated Gas Usage: 971 - 35252\nA call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\n--------------------\nIn file: ./repositories/smartbugs-curated/unchecked_return_value.sol:12\n\ncallee.call()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: callchecked(address), txdata: 0x7536185edededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0\n\n==== External Call To User-Supplied Address ====\nSWC ID: 107\nSeverity: Low\nContract: ReturnValue\nFunction name: callnotchecked(address)\nPC address: 312\nEstimated Gas Usage: 975 - 35256\nA call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\n--------------------\nIn file: ./repositories/smartbugs-curated/unchecked_return_value.sol:17\n\ncallee.call()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: callnotchecked(address), txdata: 0xbf9bd6cbdededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0\n\n==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: ReturnValue\nFunction name: callnotchecked(address)\nPC address: 312\nEstimated Gas Usage: 975 - 35256\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: ./repositories/smartbugs-curated/unchecked_return_value.sol:17\n\ncallee.call()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: callnotchecked(address), txdata: 0xbf9bd6cb, value: 0x0\nCaller: [SOMEGUY], function: callnotchecked(address), txdata: 0xbf9bd6cb, value: 0x0\n\n\n", stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/unprotected0.sol --max-depth 10', returncode=0, stdout='The analysis was completed successfully. No issues were detected.\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/wallet_02_refund_nosub.sol --max-depth 10', returncode=1, stdout='==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: Wallet\nFunction name: refund()\nPC address: 776\nEstimated Gas Usage: 1872 - 36343\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/wallet_02_refund_nosub.sol:36\n\nmsg.sender.transfer(balances[msg.sender])\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: refund(), txdata: 0x590e1ae3, value: 0x0\n\n==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: Wallet\nFunction name: deposit()\nPC address: 939\nEstimated Gas Usage: 1977 - 2452\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/wallet_02_refund_nosub.sol:23\n\nfunction deposit() public payable {\n         assert(balances[msg.sender] + msg.value > balances[msg.sender]);\n         balances[msg.sender] += msg.value;\n     }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x20008, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/wallet_03_wrong_constructor.sol --max-depth 10', returncode=1, stdout='==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: Wallet\nFunction name: migrateTo(address)\nPC address: 705\nEstimated Gas Usage: 2629 - 37240\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/wallet_03_wrong_constructor.sol:38\n\nto.transfer(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: initWallet(), txdata: 0x3e326048, value: 0x0\nCaller: [ATTACKER], function: migrateTo(address), txdata: 0x4ddaf8f2, value: 0x0\n\n==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: Wallet\nFunction name: deposit()\nPC address: 869\nEstimated Gas Usage: 1977 - 2452\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/wallet_03_wrong_constructor.sol:23\n\nfunction deposit() public payable {\n         assert(balances[msg.sender] + msg.value > balances[msg.sender]);\n         balances[msg.sender] += msg.value;\n     }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/wallet_04_confused_sign.sol --max-depth 10', returncode=1, stdout='==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: Wallet\nFunction name: withdraw(uint256)\nPC address: 340\nEstimated Gas Usage: 7840 - 62501\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: ./repositories/smartbugs-curated/wallet_04_confused_sign.sol:31\n\nmsg.sender.transfer(amount)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: deposit(), txdata: 0xd0e30db0, value: 0x1\nCaller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: Wallet\nFunction name: withdraw(uint256)\nPC address: 433\nEstimated Gas Usage: 7840 - 62501\nThe arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: ./repositories/smartbugs-curated/wallet_04_confused_sign.sol:32\n\nbalances[msg.sender] -= amount\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: deposit(), txdata: 0xd0e30db0, value: 0x1\nCaller: [CREATOR], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0\n\n==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: Wallet\nFunction name: deposit()\nPC address: 769\nEstimated Gas Usage: 1955 - 2430\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/wallet_04_confused_sign.sol:23\n\nfunction deposit() public payable {\n         assert(balances[msg.sender] + msg.value > balances[msg.sender]);\n         balances[msg.sender] += msg.value;\n     }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: deposit(), txdata: 0xd0e30db0, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/incorrect_constructor_name1.sol --max-depth 10', returncode=1, stdout='==== Transaction Order Dependence ====\nSWC ID: 114\nSeverity: Medium\nContract: Missing\nFunction name: withdraw()\nPC address: 385\nEstimated Gas Usage: 3379 - 38320\nThe value of the call is dependent on balance or storage write\nThis can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call\n--------------------\nIn file: ./repositories/smartbugs-curated/incorrect_constructor_name1.sol:32\n\nowner.transfer(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: IamMissing(), txdata: 0x2e4071d4, value: 0x0\nCaller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/mycontract.sol --max-depth 10', returncode=1, stdout='==== Dependence on tx.origin ====\nSWC ID: 115\nSeverity: Low\nContract: MyContract\nFunction name: sendTo(address,uint256)\nPC address: 233\nEstimated Gas Usage: 1078 - 1503\nUse of tx.origin as a part of authorization control.\nThe tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.\n--------------------\nIn file: ./repositories/smartbugs-curated/mycontract.sol:20\n\nrequire(tx.origin == owner)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: sendTo(address,uint256), txdata: 0x9e1a00aa, value: 0x0\n\n\n', stderr='')
CompletedProcess(args='myth analyze ./repositories/smartbugs-curated/rubixi.sol --max-depth 10', returncode=1, stdout='==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: Rubixi\nFunction name: nextPayoutWhenPyramidBalanceTotalsApproximately()\nPC address: 1660\nEstimated Gas Usage: 1822 - 1917\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: ./repositories/smartbugs-curated/rubixi.sol:140\n\nfunction nextPayoutWhenPyramidBalanceTotalsApproximately() constant returns(uint balancePayout) {\n                 balancePayout = participants[payoutOrder].payout / 1 ether;\n         }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: nextPayoutWhenPyramidBalanceTotalsApproximately(), txdata: 0x57d4021b, value: 0x0\n\n\n', stderr='')
